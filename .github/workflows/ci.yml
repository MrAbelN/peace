on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'

name: CI

jobs:
  audit:
    name: Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - uses: bp3d-actions/audit-check@9c23bd47e5e7b15b824739e0862cb878a52cc211
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  licenses:
    name: Licenses
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: EmbarkStudios/cargo-deny-action@v1

    - name: cargo-about cache
      id: cargo-about-cache
      uses: actions/cache@v3
      with:
        path: ~/.cargo/bin/cargo-about
        key: cargo-about-${{ runner.os }}

    - name: cargo-about install
      if: steps.cargo-about-cache.outputs.cache-hit != 'true'
      run: cargo install --locked cargo-about

    - name: cargo-about generate licenses
      run: cargo about generate --workspace --all-features about.hbs > doc/src/licenses.html

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - # FIXME: Switch back when actions-rs/toolchain#{209,220,222} is merged
        uses: r3-os/actions-rust-toolchain@a862b6623c178b43a3135516442a5f72fb5c1877
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt

      - # FIXME: Switch back when actions-rs/cargo#217 gets merged
        uses: r3-os/actions-rust-cargo@fb222fe18dc90e381546d012f9e3d6f353f0f627
        with:
          command: fmt
          args: --all -- --check

  docs_and_spell_check:
    name: Docs and Spell Check
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      RUSTDOCFLAGS: "-Dwarnings"
    steps:
      - name: Checkout Actions Repository
        uses: actions/checkout@v3
      - # FIXME: Switch back when actions-rs/toolchain#{209,220,222} is merged
        uses: r3-os/actions-rust-toolchain@a862b6623c178b43a3135516442a5f72fb5c1877
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Check spelling
        uses: crate-ci/typos@master

      - # FIXME: Switch back when actions-rs/cargo#217 gets merged
        uses: r3-os/actions-rust-cargo@fb222fe18dc90e381546d012f9e3d6f353f0f627
        with:
          command: doc
          args: --no-deps

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - # FIXME: Switch back when actions-rs/toolchain#{209,220,222} is merged
        uses: r3-os/actions-rust-toolchain@a862b6623c178b43a3135516442a5f72fb5c1877
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: clippy

      - name: 'Run clippy'
        run: |
          cargo clippy \
            --workspace \
            --all-features \
            --fix \
            --exclude peace_rt_model_web \
            -- -D warnings

        # Ideally we'd also run it for WASM, but:
        #
        # * `workspace_tests` is only coded for native targets.
        # * There is little benefit running it for everything again.
        #
        # The command that we *would* use is:
        #
        # ```bash
        # cargo clippy \
        #   --workspace \
        #   --target wasm32-unknown-unknown \
        #   --no-default-features \
        #   --features "error_reporting output_colorized output_json" \
        #   --fix \
        #   --exclude peace_rt_model_native \
        #   --exclude peace_item_spec_sh_cmd \
        #   --exclude peace_item_spec_sh_sync_cmd \
        #   --exclude peace_item_spec_tar_x \
        #   --exclude peace_item_specs \
        #   --exclude workspace_tests \
        #   --exclude app_cycle \
        #   --exclude download \
        #   -- -D warnings
        # ```

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v3
      - # FIXME: Switch back when actions-rs/toolchain#{209,220,222} is merged
        uses: r3-os/actions-rust-toolchain@a862b6623c178b43a3135516442a5f72fb5c1877
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: llvm-tools-preview

      - uses: taiki-e/install-action@cargo-llvm-cov
      - uses: taiki-e/install-action@nextest

      - name: 'Collect coverage'
        run: ./coverage.sh

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          files: ./target/coverage/lcov.info

  build_and_test_linux:
    name: Build and Test (Linux)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - # FIXME: Switch back when actions-rs/toolchain#{209,220,222} is merged
        uses: r3-os/actions-rust-toolchain@a862b6623c178b43a3135516442a5f72fb5c1877
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: taiki-e/install-action@nextest
      - name: 'Build and test'
        run: cargo nextest run --workspace --all-features

  build_and_test_windows:
    name: Build and Test (Windows)
    runs-on: windows-latest
    timeout-minutes: 10
    steps:
      - name: Prepare symlink configuration
        run: git config --global core.symlinks true

      - uses: actions/checkout@v3
      - # FIXME: Switch back when actions-rs/toolchain#{209,220,222} is merged
        uses: r3-os/actions-rust-toolchain@a862b6623c178b43a3135516442a5f72fb5c1877
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: taiki-e/install-action@nextest
      - name: 'Build and test'
        run: cargo nextest run --workspace --all-features

  build_examples_wasm:
    name: Build examples (WASM)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - # FIXME: Switch back when actions-rs/toolchain#{209,220,222} is merged
        uses: r3-os/actions-rust-toolchain@a862b6623c178b43a3135516442a5f72fb5c1877
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: 'Install `wasm-pack`'
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: 'v0.10.3'

      - name: 'Build examples'
        run: |
          for example in $(ls examples)
          do wasm-pack build \
            --target web \
            --out-dir "../../doc/src/examples/pkg" \
            --release \
            "examples/${example}" \
            --features 'error_reporting output_colorized output_json'
          done
